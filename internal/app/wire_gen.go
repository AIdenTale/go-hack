// Code generated by Wire. DO NOT EDIT.

//go:generate go run -mod=mod github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package app

import (
	"github.com/AIdenTale/go-hack.git/internal/app/config"
	"github.com/AIdenTale/go-hack.git/internal/repository"
	"github.com/AIdenTale/go-hack.git/internal/service"
	"github.com/AIdenTale/go-hack.git/pkg/db"
	"github.com/AIdenTale/go-hack.git/pkg/logger"
	"go.uber.org/zap"
)

// Injectors from wire.go:

func InitializeApp(configPath string) (*App, error) {
	configConfig, err := config.LoadConfig(configPath)
	if err != nil {
		return nil, err
	}
	zapLogger, err := logger.New(configPath)
	if err != nil {
		return nil, err
	}
	postgres, err := db.New(configConfig)
	if err != nil {
		return nil, err
	}
	pregnantDatPostgresRepository := db.NewPregnantDatPostgresRepository(postgres)
	pregnantDatService := service.NewPregnantDatService(pregnantDatPostgresRepository)
	dataPostgresRepository := db.NewDataPostgresRepository(postgres)
	dataService := service.NewDataService(dataPostgresRepository)
	mlClient := provideMLClient(configConfig)
	mlRepository := provideMLRepository(postgres)
	mlService := provideMLService(dataService, mlClient, mlRepository)
	app := newApp(configConfig, zapLogger, postgres, pregnantDatService, dataService, mlService)
	return app, nil
}

// wire.go:

func newApp(cfg *config.Config, logger2 *zap.Logger, pg *db.Postgres,
	pregnantService *service.PregnantDatService,
	dataService *service.DataService,
	mlService *service.MLService) *App {
	return &App{
		Config:             cfg,
		Logger:             logger2,
		Postgres:           pg,
		PregnantDatService: pregnantService,
		DataService:        dataService,
		MLService:          mlService,
	}
}

// AppDeps агрегирует зависимости приложения для внедрения через wire.
type App struct {
	Config *config.Config
	Logger *zap.Logger

	Postgres           *db.Postgres
	PregnantDatService *service.PregnantDatService
	DataService        *service.DataService
	MLService          *service.MLService
}

// InitializeApp инициализирует зависимости приложения через wire.
// provideMLClient создает клиент для ML сервиса
func provideMLClient(cfg *config.Config) *service.MLClient {
	return service.NewMLClient(cfg.ML.BaseURL)
}

// provideMLRepository создает ML репозиторий
func provideMLRepository(pg *db.Postgres) repository.MLRepository {
	return db.NewMLPostgresRepository(pg)
}

// Provide MLService
func provideMLService(
	dataService *service.DataService,
	mlClient *service.MLClient,
	mlRepo repository.MLRepository,
) *service.MLService {
	return service.NewMLService(dataService, mlClient, mlRepo)
}
